name: AvicaRDP-Advanced-GoFile-Telegram

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Auto restart every 6 hours

jobs:
  build:
    name: Avica RDP Advanced with multi-hash + GoFile + Telegram
    runs-on: windows-latest
    timeout-minutes: 350

    steps:
      - name: System Preparation
        run: |
          Write-Host "üöÄ Preparing system for AvicaRDP..." -ForegroundColor Green
          choco install 7zip -y --no-progress

      - name: Download Required Files
        shell: pwsh
        run: |
          Write-Host "üì• Downloading setup files..." -ForegroundColor Cyan
          Invoke-WebRequest -Uri "https://gitlab.com/userup908/my-rdp/-/raw/main/setup.py" -OutFile "setup.py"
          Invoke-WebRequest -Uri "https://download.avica.com/AvicaLite_v8.0.8.9.exe" -OutFile "Avica_setup.exe"
          Invoke-WebRequest -Uri "https://gitlab.com/userup908/my-rdp/-/raw/main/show.bat" -OutFile "show.bat"
          Invoke-WebRequest -Uri "https://gitlab.com/userup908/my-rdp/-/raw/main/loop.bat" -OutFile "loop.bat"

          # Multiple valid hashes allowed: add or rotate as needed
          $AllowedHashes = @(
            "REPLACE_WITH_REAL_SHA256_HASH_1",
            "REPLACE_WITH_REAL_SHA256_HASH_2",
            "REPLACE_WITH_REAL_SHA256_HASH_3"
          )

          $hash = (Get-FileHash "Avica_setup.exe" -Algorithm SHA256).Hash
          if (-not ($AllowedHashes -contains $hash)) {
            Write-Host "‚ùå Hash mismatch! Possible tampering or new build detected." -ForegroundColor Red
            Write-Host "Expected one of: $($AllowedHashes -join ', ')" -ForegroundColor Yellow
            Write-Host "Got: $hash" -ForegroundColor Yellow
            exit 1
          } else {
            Write-Host "‚úÖ Integrity check passed with an allowed hash." -ForegroundColor Green
          }

      - name: Install Python Dependencies
        run: |
          python -m pip install --quiet requests pyautogui psutil

      - name: Enable RDP Access
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Write-Host "‚úÖ RDP enabled" -ForegroundColor Green

      - name: Configure User Account
        shell: pwsh
        env:
          RDP_PASS: ${{ secrets.RDP_PASSWORD }}
        run: |
          net user runneradmin $env:RDP_PASS
          Write-Host "üîê System user password set securely" -ForegroundColor Yellow

      - name: Start Avica Installer
        shell: pwsh
        run: |
          Write-Host "‚ö° Starting Avica installer..." -ForegroundColor Cyan
          Start-Process "Avica_setup.exe" -Wait
          python setup.py
          Write-Host "‚úÖ Avica installation finished!" -ForegroundColor Green

      - name: Collect Avica Credentials
        shell: pwsh
        env:
          RDP_PASS: ${{ secrets.RDP_PASSWORD }}
        run: |
          # Replace this simulation with real extraction if available from Avica logs or registry
          "AvicaID=123-456-789" | Out-File connection.txt -Encoding ascii
          "Password=$env:RDP_PASS" | Out-File connection.txt -Append -Encoding ascii

      - name: Upload to GoFile
        shell: pwsh
        run: |
          python - <<'EOF'
          import requests, json
          # Prefer the documented global endpoint
          # Response example includes status and data.directLink/code
          # https://gofile.io/api docs indicate POST /uploadFile
          url = "https://upload.gofile.io/uploadfile"
          with open("connection.txt","rb") as f:
              r = requests.post(url, files={"file": f})
          if r.ok and r.json().get("status") == "ok":
              data = r.json().get("data", {})
              # Prefer directLink if present; otherwise construct from code
              link = data.get("directLink") or (f"https://gofile.io/d/{data.get('code')}" if data.get("code") else None)
              open("gofile_link.txt","w").write(link or "Error: No link returned")
              print(f"‚úÖ GoFile Link: {link}")
          else:
              print("‚ùå Failed to upload connection info to GoFile")
              print(r.status_code, r.text)
          EOF

      - name: Show Connection Info
        shell: pwsh
        run: |
          Write-Host "
          ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
          ‚ïë         AVICA RDP - ADVANCED MODE           ‚ïë
          ‚ïë    Connection Info uploaded to GoFile       ‚ïë
          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
          " -ForegroundColor Cyan
          Get-Content gofile_link.txt

      - name: Start Avica Service
        run: cmd /c show.bat

      - name: Keep Session Alive
        run: cmd /c loop.bat

      - name: Send Status to Telegram
        if: always()
        shell: pwsh
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<'EOF'
          import requests, psutil, time
          token = "${{ env.TELEGRAM_BOT_TOKEN }}"
          chat_id = "${{ env.TELEGRAM_CHAT_ID }}"
          try:
              link = open("gofile_link.txt","r").read().strip()
          except Exception:
              link = "Unavailable"

          cpu = psutil.cpu_percent(interval=1)
          mem = psutil.virtual_memory().percent
          # Uptime from boot_time (seconds since epoch) -> elapsed
          uptime_seconds = time.time() - psutil.boot_time()
          h = int(uptime_seconds // 3600)
          m = int((uptime_seconds % 3600) // 60)
          s = int(uptime_seconds % 60)
          uptime = f"{h:02d}:{m:02d}:{s:02d}"

          status = "‚úÖ Success" if link and link != "Unavailable" else "‚ö†Ô∏è Completed with issues"
          msg = (
              f"{status}\n"
              f"üîó GoFile: {link}\n\n"
              f"üìä System Health\n"
              f"‚Ä¢ CPU: {cpu}%\n"
              f"‚Ä¢ RAM: {mem}%\n"
              f"‚Ä¢ Uptime: {uptime}"
          )
          requests.get(f"https://api.telegram.org/bot{token}/sendMessage",
                       params={"chat_id": chat_id, "text": msg})
          EOF
